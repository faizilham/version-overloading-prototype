Module: lib
FILE: lib.kt
    package lib

    public final const val VERSION_1_2: R|kotlin/String| = String(1.2)
        public get(): R|kotlin/String|
    public final const val VERSION_1_3: R|kotlin/String| = String(1.3)
        public get(): R|kotlin/String|
    public final object MyExample : R|kotlin/Any| {
        private constructor(): R|lib/MyExample| {
            super<R|kotlin/Any|>()
        }

        public final val zero: R|kotlin/Int| = Int(0)
            public get(): R|kotlin/Int|

        @R|kotlin/jvm/JvmStatic|() public final fun myAdd(x: R|kotlin/Int|, y: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/IntroducedAt|(version = String(1.2)) z: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/IntroducedAt|(version = String(1.3)) a1: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/IntroducedAt|(version = String(1.3)) a2: R|kotlin/Int| = Int(0)): R|kotlin/Int| {
            ^myAdd R|<local>/x|.R|kotlin/Int.plus|(R|<local>/y|).R|kotlin/Int.plus|(R|<local>/z|).R|kotlin/Int.plus|(R|<local>/a1|).R|kotlin/Int.plus|(R|<local>/a2|)
        }

        @R|kotlin/jvm/JvmStatic|() public final fun middle(x: R|kotlin/Float|, @R|com/faizilham/prototype/versioning/IntroducedAt|(version = R|lib/VERSION_1_2|) x1: R|kotlin/Float| = Float(0.0), y: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/IntroducedAt|(version = R|lib/VERSION_1_3|) y1: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/IntroducedAt|(version = R|lib/VERSION_1_2|) z: R|kotlin/Float| = Float(0.0)): R|kotlin/Float| {
            ^middle this@R|lib/MyExample|.R|lib/MyExample.zero|.R|kotlin/Int.plus|(R|<local>/x|).R|kotlin/Float.plus|(R|<local>/x1|).R|kotlin/Float.plus|(R|<local>/y|).R|kotlin/Float.plus|(R|<local>/y1|).R|kotlin/Float.plus|(R|<local>/z|)
        }

    }
    public final val abcd: R|kotlin/Int| = Int(1)
        public get(): R|kotlin/Int|
    public final class Example2 : R|kotlin/Any| {
        public constructor(): R|lib/Example2| {
            super<R|kotlin/Any|>()
        }

        public final val yz: R|kotlin/Int| = Int(1)
            public get(): R|kotlin/Int|

        public final fun test(x: R|kotlin/Int|, y: R|kotlin/Int| = this@R|lib/Example2|.R|lib/Example2.yz|, y1: R|kotlin/Int| = this@R|lib/Example2|.R|lib/Example2.yz|, @R|com/faizilham/prototype/versioning/IntroducedAt|(version = String(1.2)) z: R|kotlin/Int| = Int(1)): R|kotlin/Unit| {
        }

    }
    public final fun outside(x: R|kotlin/Int|, y: R|kotlin/Int| = R|lib/abcd|, y1: R|kotlin/Int| = R|lib/abcd|, @R|com/faizilham/prototype/versioning/IntroducedAt|(version = String(1.2)) z: R|kotlin/Int| = Int(1)): R|kotlin/Unit| {
    }
FILE: main.kt
    package lib

    public final fun box(): R|kotlin/String| {
        lval javaTest: R|lib/JavaTest| = R|lib/JavaTest.JavaTest|()
        lval methods: R|ft<java/util/HashSet<ft<kotlin/Pair<kotlin/String!, kotlin/Boolean!>, kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>>, java/util/HashSet<ft<kotlin/Pair<kotlin/String!, kotlin/Boolean!>, kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>>?>| = R|<local>/javaTest|.R|lib/JavaTest.reflectMethods|()
        lval overloads: R|kotlin/collections/List<kotlin/Pair<kotlin/String, kotlin/Boolean>>| = R|kotlin/collections/listOf|<R|kotlin/Pair<kotlin/String, kotlin/Boolean>|>(vararg(R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final int lib.MyExample.myAdd(int,int)), Boolean(true)), R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final int lib.MyExample.myAdd(int,int,int)), Boolean(true)), R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final int lib.MyExample.myAdd(int,int,int,int,int)), Boolean(false)), R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final float lib.MyExample.middle(float,int)), Boolean(true)), R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final float lib.MyExample.middle(float,float,int,float)), Boolean(true)), R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final float lib.MyExample.middle(float,float,int,int,float)), Boolean(false))))
        lval overloadCounts: R|kotlin/collections/Map<kotlin/String, kotlin/Int>| = R|kotlin/collections/mapOf|<R|kotlin/String|, R|kotlin/Int|>(vararg(String(myAdd).R|kotlin/to|<R|kotlin/String|, R|kotlin/Int|>(Int(3)), String(middle).R|kotlin/to|<R|kotlin/String|, R|kotlin/Int|>(Int(3))))
         {
            lval <iterator>: R|kotlin/collections/MutableIterator<ft<@EnhancedNullability kotlin/Pair<kotlin/String!, kotlin/Boolean!>, @EnhancedNullability kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>>| = R|<local>/methods|.R|SubstitutionOverride<java/util/HashSet.iterator: R|@EnhancedNullability kotlin/collections/MutableIterator<ft<@EnhancedNullability kotlin/Pair<kotlin/String!, kotlin/Boolean!>, @EnhancedNullability kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>>|>|()
            while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/MutableIterator.hasNext: R|kotlin/Boolean|>|()) {
                lval <destruct>: R|ft<kotlin/Pair<kotlin/String!, kotlin/Boolean!>, kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>| = R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/MutableIterator.next: R|ft<@EnhancedNullability kotlin/Pair<kotlin/String!, kotlin/Boolean!>, @EnhancedNullability kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>|>|()
                lval methodName: R|kotlin/String!| = R|<local>/<destruct>|.R|SubstitutionOverride<kotlin/Pair.component1: R|kotlin/String!|>|()
                lval syn: R|kotlin/Boolean!| = R|<local>/<destruct>|.R|SubstitutionOverride<kotlin/Pair.component2: R|kotlin/Boolean!|>|()
                 {
                    R|kotlin/io/println|(<strcat>(R|<local>/methodName|, String(, syn: ), R|<local>/syn|))
                }

            }

        }

         {
            lval <iterator>: R|kotlin/collections/Iterator<kotlin/Pair<kotlin/String, kotlin/Boolean>>| = R|<local>/overloads|.R|SubstitutionOverride<kotlin/collections/List.iterator: R|kotlin/collections/Iterator<kotlin/Pair<kotlin/String, kotlin/Boolean>>|>|()
            while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.hasNext: R|kotlin/Boolean|>|()) {
                lval overload: R|kotlin/Pair<kotlin/String, kotlin/Boolean>| = R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.next: R|kotlin/Pair<kotlin/String, kotlin/Boolean>|>|()
                 {
                    when () {
                        R|<local>/methods|.R|SubstitutionOverride<java/util/HashSet.contains: R|kotlin/Boolean|>|(R|<local>/overload|).R|kotlin/Boolean.not|() ->  {
                            ^box <strcat>(String(Fail: overload not found ), R|<local>/overload|)
                        }
                    }

                }

            }

        }

         {
            lval <iterator>: R|kotlin/collections/Iterator<kotlin/collections/Map.Entry<kotlin/String, kotlin/Int>>| = R|<local>/overloadCounts|.R|kotlin/collections/iterator|<R|kotlin/String|, R|kotlin/Int|>()
            while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.hasNext: R|kotlin/Boolean|>|()) {
                lval <destruct>: R|kotlin/collections/Map.Entry<kotlin/String, kotlin/Int>| = R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.next: R|kotlin/collections/Map.Entry<kotlin/String, kotlin/Int>|>|()
                lval name: R|kotlin/String| = R|<local>/<destruct>|.R|kotlin/collections/component1|<R|kotlin/String|, R|kotlin/Int|>()
                lval expected: R|kotlin/Int| = R|<local>/<destruct>|.R|kotlin/collections/component2|<R|kotlin/String|, R|kotlin/Int|>()
                 {
                    lval pattern: R|kotlin/String| = <strcat>(R|<local>/name|, String(())
                    lval actual: R|kotlin/Int| = R|<local>/methods|.R|kotlin/collections/count|<R|ft<kotlin/Pair<kotlin/String!, kotlin/Boolean!>, kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>|>(<L> = count@fun <anonymous>(<destruct>: R|ft<kotlin/Pair<kotlin/String!, kotlin/Boolean!>, kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>|): R|kotlin/Boolean| <inline=Inline, kind=UNKNOWN>  {
                        lval sign: R|kotlin/String!| = R|<local>/<destruct>|.R|SubstitutionOverride<kotlin/Pair.component1: R|kotlin/String!|>|()
                        lval <unused var>: R|kotlin/Boolean!| = R|<local>/<destruct>|.R|SubstitutionOverride<kotlin/Pair.component2: R|kotlin/Boolean!|>|()
                        ^  {
                            R|<local>/sign|.R|kotlin/text/contains|(R|<local>/pattern|)
                        }

                    }
                    )
                    when () {
                        !=(R|<local>/actual|, R|<local>/expected|) ->  {
                            ^box <strcat>(String(Fail: overload ), R|<local>/name|, String( count does not match, expected ), R|<local>/expected|, String(, actual ), R|<local>/actual|)
                        }
                    }

                }

            }

        }

        R|kotlin/test/assertContentEquals|<R|kotlin/Int!|>(R|kotlin/collections/listOf|<R|kotlin/Int|>(vararg(Int(2), Int(3), Int(5))), R|<local>/javaTest|.R|lib/JavaTest.invokeMethods|())
        ^box String(OK)
    }
Module: m2
FILE: m2.kt
    package m2

    public final fun test(): R|kotlin/Unit| {
        Q|lib/MyExample|.R|lib/MyExample.myAdd|(Int(1))
        Q|lib/MyExample|.R|lib/MyExample.myAdd|(Int(1), Int(1))
    }
    public final fun test2(): R|kotlin/Unit| {
        Q|lib/MyExample|.R|lib/MyExample.myAdd|(Int(1), Int(1), Int(1))
        Q|lib/MyExample|.R|lib/MyExample.myAdd|(Int(1), Int(1), Int(1), Int(1))
    }
