Module: lib
FILE: lib.kt
    package lib

    public final object MyExample : R|kotlin/Any| {
        private constructor(): R|lib/MyExample| {
            super<R|kotlin/Any|>()
        }

        @R|kotlin/jvm/JvmStatic|() @R|com/faizilham/prototype/versioning/VersionOverloads|() public final fun myAdd(x: R|kotlin/Int|, y: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/Version|(versionNumber = String(1.2)) z: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/Version|(versionNumber = String(1.3)) a1: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/Version|(versionNumber = String(1.3)) a2: R|kotlin/Int| = Int(0)): R|kotlin/Int| {
            ^myAdd Int(0)
        }

    }
FILE: main.kt
    package lib

    public final fun box(): R|kotlin/String| {
        ^box R|lib/JavaTest.JavaTest|().R|lib/JavaTest.boxTest|()
    }
Module: m2
FILE: m2.kt
    package m2

    public final fun test(): R|kotlin/Unit| {
        Q|lib/MyExample|.R|lib/MyExample.myAdd|(Int(1))
        Q|lib/MyExample|.R|lib/MyExample.myAdd|(Int(1), Int(1))
    }
    public final fun test2(): R|kotlin/Unit| {
        Q|lib/MyExample|.R|lib/MyExample.myAdd|(Int(1), Int(1), Int(1))
        Q|lib/MyExample|.R|lib/MyExample.myAdd|(Int(1), Int(1), Int(1), Int(1))
    }
