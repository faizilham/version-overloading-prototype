FILE: trail_m1.kt
    public final object TrailingExample : R|kotlin/Any| {
        private constructor(): R|TrailingExample| {
            super<R|kotlin/Any|>()
        }

        @R|kotlin/jvm/JvmStatic|() @R|com/faizilham/prototype/versioning/VersionOverloads|() public final fun withlam(x: R|kotlin/Int|, y: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/IntroducedAt|(versionNumber = String(1.2)) z: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/IntroducedAt|(versionNumber = String(1.3)) a1: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/IntroducedAt|(versionNumber = String(1.4)) a2: R|kotlin/Int| = Int(0), f: R|(kotlin/Int) -> kotlin/Int|): R|kotlin/Int| {
            ^withlam R|<local>/f|.R|SubstitutionOverride<kotlin/Function1.invoke: R|kotlin/Int|>|(R|<local>/x|.R|kotlin/Int.plus|(R|<local>/y|).R|kotlin/Int.plus|(R|<local>/z|).R|kotlin/Int.plus|(R|<local>/a1|).R|kotlin/Int.plus|(R|<local>/a2|))
        }

        @R|kotlin/jvm/JvmStatic|() @R|com/faizilham/prototype/versioning/VersionOverloads|() public final fun withDefLam(x: R|kotlin/Int|, y: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/IntroducedAt|(versionNumber = String(1.2)) z: R|kotlin/Int| = Int(0), @R|com/faizilham/prototype/versioning/IntroducedAt|(versionNumber = String(1.3)) a: R|kotlin/Int| = Int(0), f: R|(kotlin/Int) -> kotlin/Int| = fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Int| <inline=Unknown>  {
            ^ R|<local>/it|
        }
        ): R|kotlin/Int| {
            ^withDefLam R|<local>/f|.R|SubstitutionOverride<kotlin/Function1.invoke: R|kotlin/Int|>|(R|<local>/x|.R|kotlin/Int.plus|(R|<local>/y|).R|kotlin/Int.plus|(R|<local>/z|).R|kotlin/Int.plus|(R|<local>/a|))
        }

    }
FILE: trail_m2.kt
    public final fun test(): R|kotlin/Unit| {
        Q|TrailingExample|.R|/TrailingExample.withlam|(Int(1), Int(1), <L> = withlam@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Int| <inline=NoInline>  {
            ^ R|<local>/it|
        }
        )
        Q|TrailingExample|.R|/TrailingExample.withlam|(Int(1), Int(1), Int(2), <L> = withlam@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Int| <inline=NoInline>  {
            ^ R|<local>/it|
        }
        )
        Q|TrailingExample|.R|/TrailingExample.withlam|(Int(1), Int(1), Int(2), Int(3), <L> = withlam@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Int| <inline=NoInline>  {
            ^ R|<local>/it|
        }
        )
        Q|TrailingExample|.R|/TrailingExample.withlam|(Int(1), Int(1), Int(2), Int(3), Int(4), <L> = withlam@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Int| <inline=NoInline>  {
            ^ R|<local>/it|
        }
        )
    }
    public final fun test2(): R|kotlin/Unit| {
        Q|TrailingExample|.R|/TrailingExample.withDefLam|(Int(1), Int(1))
        Q|TrailingExample|.R|/TrailingExample.withDefLam|(Int(1), Int(1), Int(2))
        Q|TrailingExample|.R|/TrailingExample.withDefLam|(Int(1), Int(1), Int(2), <L> = withDefLam@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Int| <inline=NoInline>  {
            ^ Int(0)
        }
        )
        Q|TrailingExample|.R|/TrailingExample.withDefLam|(Int(1), Int(1), Int(2), Int(3))
    }
FILE: main.kt
    public final fun box(): R|kotlin/String| {
        lval methods: R|ft<java/util/HashSet<ft<kotlin/Pair<kotlin/String!, kotlin/Boolean!>, kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>>, java/util/HashSet<ft<kotlin/Pair<kotlin/String!, kotlin/Boolean!>, kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>>?>| = R|/JavaTest.JavaTest|().R|/JavaTest.reflectMethods|()
        lval overloads: R|kotlin/collections/List<kotlin/Pair<kotlin/String, kotlin/Boolean>>| = R|kotlin/collections/listOf|<R|kotlin/Pair<kotlin/String, kotlin/Boolean>|>(vararg(R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final int TrailingExample.withDefLam(int,int,int,kotlin.jvm.functions.Function1)), Boolean(true)), R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final int TrailingExample.withDefLam(int,int,kotlin.jvm.functions.Function1)), Boolean(true)), R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final int TrailingExample.withDefLam(int,int,int,int,kotlin.jvm.functions.Function1<? super java.lang.Integer, java.lang.Integer>)), Boolean(false)), R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final int TrailingExample.withlam(int,int,kotlin.jvm.functions.Function1)), Boolean(true)), R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final int TrailingExample.withlam(int,int,int,kotlin.jvm.functions.Function1)), Boolean(true)), R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final int TrailingExample.withlam(int,int,int,int,kotlin.jvm.functions.Function1)), Boolean(true)), R|kotlin/Pair.Pair|<R|kotlin/String|, R|kotlin/Boolean|>(String(public static final int TrailingExample.withlam(int,int,int,int,int,kotlin.jvm.functions.Function1<? super java.lang.Integer, java.lang.Integer>)), Boolean(false))))
        lval overloadCounts: R|kotlin/collections/Map<kotlin/String, kotlin/Int>| = R|kotlin/collections/mapOf|<R|kotlin/String|, R|kotlin/Int|>(vararg(String(withlam).R|kotlin/to|<R|kotlin/String|, R|kotlin/Int|>(Int(4)), String(withDefLam).R|kotlin/to|<R|kotlin/String|, R|kotlin/Int|>(Int(3))))
         {
            lval <iterator>: R|kotlin/collections/Iterator<kotlin/Pair<kotlin/String, kotlin/Boolean>>| = R|<local>/overloads|.R|SubstitutionOverride<kotlin/collections/List.iterator: R|kotlin/collections/Iterator<kotlin/Pair<kotlin/String, kotlin/Boolean>>|>|()
            while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.hasNext: R|kotlin/Boolean|>|()) {
                lval overload: R|kotlin/Pair<kotlin/String, kotlin/Boolean>| = R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.next: R|kotlin/Pair<kotlin/String, kotlin/Boolean>|>|()
                 {
                    when () {
                        R|<local>/methods|.R|SubstitutionOverride<java/util/HashSet.contains: R|kotlin/Boolean|>|(R|<local>/overload|).R|kotlin/Boolean.not|() ->  {
                            ^box <strcat>(String(Fail: overload not found ), R|<local>/overload|)
                        }
                    }

                }

            }

        }

         {
            lval <iterator>: R|kotlin/collections/Iterator<kotlin/collections/Map.Entry<kotlin/String, kotlin/Int>>| = R|<local>/overloadCounts|.R|kotlin/collections/iterator|<R|kotlin/String|, R|kotlin/Int|>()
            while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.hasNext: R|kotlin/Boolean|>|()) {
                lval <destruct>: R|kotlin/collections/Map.Entry<kotlin/String, kotlin/Int>| = R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.next: R|kotlin/collections/Map.Entry<kotlin/String, kotlin/Int>|>|()
                lval name: R|kotlin/String| = R|<local>/<destruct>|.R|kotlin/collections/component1|<R|kotlin/String|, R|kotlin/Int|>()
                lval expected: R|kotlin/Int| = R|<local>/<destruct>|.R|kotlin/collections/component2|<R|kotlin/String|, R|kotlin/Int|>()
                 {
                    lval pattern: R|kotlin/String| = <strcat>(R|<local>/name|, String(())
                    lval actual: R|kotlin/Int| = R|<local>/methods|.R|kotlin/collections/count|<R|ft<kotlin/Pair<kotlin/String!, kotlin/Boolean!>, kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>|>(<L> = count@fun <anonymous>(<destruct>: R|ft<kotlin/Pair<kotlin/String!, kotlin/Boolean!>, kotlin/Pair<kotlin/String!, kotlin/Boolean!>?>|): R|kotlin/Boolean| <inline=Inline, kind=UNKNOWN>  {
                        lval sign: R|kotlin/String!| = R|<local>/<destruct>|.R|SubstitutionOverride<kotlin/Pair.component1: R|kotlin/String!|>|()
                        lval <unused var>: R|kotlin/Boolean!| = R|<local>/<destruct>|.R|SubstitutionOverride<kotlin/Pair.component2: R|kotlin/Boolean!|>|()
                        ^  {
                            R|<local>/sign|.R|kotlin/text/contains|(R|<local>/pattern|)
                        }

                    }
                    )
                    when () {
                        !=(R|<local>/actual|, R|<local>/expected|) ->  {
                            ^box <strcat>(String(Fail: overload ), R|<local>/name|, String( count does not match, expected ), R|<local>/expected|, String(, actual ), R|<local>/actual|)
                        }
                    }

                }

            }

        }

        ^box String(OK)
    }
